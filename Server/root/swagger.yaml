openapi: 3.0.0
info:
  title: Unidomus API
  version: 2.0.0
  description: API for the Unidomus application, a platform for real estate listings and roommate matching.

paths:
  /api/token/token/{token}:
    get:
      summary: Confirm token and activate user account
      description: Confirm the token sent to the user's email and activate the user's account.
      tags:
        - Tokens
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: The token sent to the user's email for account activation.
      responses:
        "200":
          description: Token confirmed and user account activated successfully.
        "400":
          description: Invalid or expired token.
        "500":
          description: Internal server error occurred.
  /api/listings:
    get:
      tags:
        - Listings
      summary: Retrieve listings
      description: >
        Retrieve a list of listings. If the request is made by an admin, the response will include both banned and non-banned listings. If the request is made by a non-admin or an unauthenticated user, only non-banned listings will be returned.
      parameters:
        - name: priceMin
          in: query
          description: Minimum price of the listings
          required: false
          schema:
            type: integer
            example: 1000
        - name: priceMax
          in: query
          description: Maximum price of the listings
          required: false
          schema:
            type: integer
            example: 2000
        - name: typology
          in: query
          description: Typology of the listings
          required: false
          schema:
            type: string
            example: doppia
        - name: city
          in: query
          description: City where the listings are located
          required: false
          schema:
            type: string
            example: Trento
        - name: floorAreaMin
          in: query
          description: Minimum floor area of the listings
          required: false
          schema:
            type: integer
            example: 50
        - name: floorAreaMax
          in: query
          description: Maximum floor area of the listings
          required: false
          schema:
            type: integer
            example: 100
      responses:
        "200":
          description: List of listings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  listings:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: 60d21b4667d0d8992e610c85
                        price:
                          type: integer
                          example: 1500
                        typology:
                          type: string
                          example: doppia
                        address:
                          type: object
                          properties:
                            city:
                              type: string
                              example: Trento
                        floorArea:
                          type: integer
                          example: 80
                        ban:
                          type: object
                          properties:
                            banTime:
                              type: string
                              format: date-time
                              example: "2024-06-02T00:47:01.872Z"
                            banPermanently:
                              type: boolean
                              example: false
        "401":
          description: Unauthorized - Token is missing or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No token provided
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error retrieving listings
                  error:
                    type: string
                    example: Database error
  /api/listings/{id}:
    get:
      summary: Retrieve a listing by ID
      description: Retrieve a listing by its unique identifier.
      tags:
        - Listings
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the listing to retrieve
      responses:
        "200":
          description: Listing retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Listing"
        "400":
          description: Listing not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Listing not found
        "500":
          description: Error retrieving listing
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error retrieving listing
                  error:
                    type: string
    delete:
      description:
        Deletes a listing by its ID. The publisher of the listing is notified
        upon deletion.
      parameters:
        - description: The ID of the listing to delete
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                type: object
          description: Listing deleted successfully
        "400":
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                type: object
          description: Listing not found or Publisher not found
        "500":
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: Internal server error
      summary: Delete listing by ID
      tags:
        - Listings
    put:
      description:
        Updates the details of a listing by its ID. This includes updating
        fields such as price, typology, address, description, and more.
      parameters:
        - description: The ID of the listing to update
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                address:
                  properties:
                    cap:
                      type: string
                    city:
                      type: string
                    country:
                      type: string
                    houseNum:
                      type: string
                    province:
                      type: string
                    street:
                      type: string
                  type: object
                availability:
                  type: string
                description:
                  type: string
                floorArea:
                  type: number
                photos:
                  items:
                    type: string
                  type: array
                price:
                  type: number
                publisherID:
                  type: string
                tenantsID:
                  items:
                    type: string
                  type: array
                typology:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  listing:
                    $ref: "#/components/schemas/Listing"
                type: object
          description: Listing updated successfully
        "400":
          content:
            application/json:
              schema:
                properties:
                  errors:
                    items:
                      properties:
                        field:
                          type: string
                        message:
                          type: string
                      type: object
                    type: array
                  message:
                    type: string
                type: object
          description: Validation errors
        "404":
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                type: object
          description: Listing not found
        "500":
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: Internal server error
      summary: Update listing by ID
      tags:
        - Listings
  /api/listings/{id}/ban:
    put:
      summary: Ban a listing by ID for a specified duration or permanently
      description: Ban a listing by ID for a specified duration or permanently.
      tags:
        - Listings
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the listing to ban
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                banTimeInSeconds:
                  type: integer
                  description: The duration of the ban in seconds
                  example: 3600
                banPermanently:
                  type: boolean
                  description: Whether the ban is permanent
                  example: false
                banMsg:
                  type: string
                  description: The message explaining the reason for the ban
                  example: "Violation of terms"
      responses:
        "200":
          description: Listing banned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Listing banned successfully"
                  listingBan:
                    type: object
                    properties:
                      banTime:
                        type: string
                        format: date-time
                      banPermanently:
                        type: boolean
                      prevBanNum:
                        type: integer
        "400":
          description: Invalid ban time provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid ban time provided"
        "404":
          description: Listing not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Listing not found"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error"
                  error:
                    type: string
                    example: "Database error"
  /api/listings/{id}/unban:
    put:
      summary: Unban a listing by ID
      description: Unban a listing by ID.
      tags:
        - Listings
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the listing to unban
          schema:
            type: string
      responses:
        "200":
          description: Listing unbanned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Listing unbanned successfully"
        "400":
          description: Listing is not banned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Listing is not banned"
        "404":
          description: Listing not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Listing not found"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error unbanning listing"
                  error:
                    type: string
                    example: "Database error"
  /api/listings/coordinates:
    get:
      summary: Convert addresses to coordinates
      description: Converts addresses retrieved from the database into coordinates using a Geocoding API, to plot them on a map.
      tags:
        - Listings
      parameters:
        - in: query
          name: priceMin
          schema:
            type: number
          description: Minimum price
        - in: query
          name: priceMax
          schema:
            type: number
          description: Maximum price
        - in: query
          name: typology
          schema:
            type: string
          description: Property type
        - in: query
          name: city
          schema:
            type: string
          description: Property city
        - in: query
          name: floorAreaMin
          schema:
            type: number
          description: Minimum floor area
        - in: query
          name: floorAreaMax
          schema:
            type: number
          description: Maximum floor area
      responses:
        "200":
          description: Geographic coordinates of the listings
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        latitude:
                          type: number
                          description: Latitude
                        longitude:
                          type: number
                          description: Longitude
                        label:
                          type: string
                          description: Location label
        "500":
          description: Error during coordinate retrieval
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error retrieving listings with filters
                  error:
                    type: string
  /api/listings/coordinates/{id}:
    get:
      summary: Ottenere le coordinate del listing
      description: Recupera un listing tramite ID e converte l'indirizzo in coordinate geografiche.
      tags:
        - Listings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: L'ID del listing da recuperare.
      responses:
        "200":
          description: Coordinate ottenute con successo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      latitude:
                        type: number
                        description: La latitudine del listing.
                      longitude:
                        type: number
                        description: La longitudine del listing.
                      label:
                        type: string
                        description: L'etichetta dell'indirizzo convertito.
        "400":
          description: Listing non trovato.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Listing not found
        "500":
          description: Errore interno del server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error retrieving listing
                  error:
                    type: string
                    example: Descrizione dell'errore
  /api/listings/add:
    post:
      summary: Add a new listing
      description: Adds a new real estate listing to the database with validation on input data.
      tags:
        - Listings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: object
                  required:
                    - street
                    - city
                    - cap
                    - houseNum
                    - province
                    - country
                  properties:
                    street:
                      type: string
                    city:
                      type: string
                    cap:
                      type: string
                      pattern: '^\d{5}$'
                    houseNum:
                      type: string
                    province:
                      type: string
                      maxLength: 2
                      minLength: 2
                    country:
                      type: string
                photos:
                  type: array
                  items:
                    type: string
                  minItems: 1
                  maxItems: 10
                publisherID:
                  type: string
                  format: uuid
                tenantsID:
                  type: array
                  items:
                    type: string
                    format: uuid
                typology:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  minimum: 10
                  maximum: 10000
                floorArea:
                  type: number
                  minimum: 10
                  maximum: 10000
                availability:
                  type: string
      responses:
        "201":
          description: Listing added successfully. Returns newly added listing.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Listing"
        "400":
          description: Invalid input parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "error"
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                        message:
                          type: string
        "500":
          description: Internal server error occurred during the listing creation.

  /api/users/registration:
    post:
      summary: Register a new user
      description: Register a new user with the provided details.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                username:
                  type: string
              required:
                - email
                - password
                - username
      responses:
        "200":
          description: User registered successfully.
        "400":
          description: Bad request or validation error.
        "500":
          description: Internal server error occurred.
  /api/users/authentication:
    post:
      summary: Authenticate user
      description: Authenticate user with provided credentials and return an access token.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "200":
          description: User authenticated successfully and access token generated.
        "400":
          description: Bad request or validation error.
        "401":
          description: Unauthorized - Invalid credentials.
        "500":
          description: Internal server error occurred.
  /api/users/auth/google:
    post:
      summary: Autenticazione con Google
      description: Effettua il login tramite un token ID di Google e genera un JWT per l'utente.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Il token ID di Google.
              required:
                - token
      responses:
        "200":
          description: JWT generato con successo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Il token JWT generato.
        "500":
          description: Errore interno del server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
  /api/users/housingseekers:
    get:
      tags:
        - Users
      summary: Retrieve housing seekers
      description: >
        Retrieve a list of housing seekers. If the request is made by an admin, the response will include both banned and non-banned users. If the request is made by a non-admin or an unauthenticated user, only non-banned users will be returned.
      parameters:
        - name: etaMin
          in: query
          description: Minimum age of the housing seekers
          required: false
          schema:
            type: integer
            example: 18
        - name: etaMax
          in: query
          description: Maximum age of the housing seekers
          required: false
          schema:
            type: integer
            example: 65
        - name: gender
          in: query
          description: Gender of the housing seekers
          required: false
          schema:
            type: string
            example: male
        - name: hobbies
          in: query
          description: List of hobbies the housing seekers should have
          required: false
          schema:
            type: array
            items:
              type: string
            example: [reading, sports]
        - name: habits
          in: query
          description: List of habits the housing seekers should have
          required: false
          schema:
            type: array
            items:
              type: string
            example: [non-smoker, early-riser]
      responses:
        "200":
          description: List of housing seekers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: 60d21b4667d0d8992e610c85
                        email:
                          type: string
                          example: user@example.com
                        username:
                          type: string
                          example: john_doe
                        gender:
                          type: string
                          example: male
                        hobbies:
                          type: array
                          items:
                            type: string
                        habits:
                          type: array
                          items:
                            type: string
                        ban:
                          type: object
                          properties:
                            banTime:
                              type: string
                              format: date-time
                            banPermanently:
                              type: boolean
        "401":
          description: Unauthorized - Token is missing or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No token provided
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error retrieving housing seekers
                  error:
                    type: string
                    example: Database error
  /api/users/tags:
    get:
      summary: Get user tags
      description: Retrieve all tags form the database.
      tags:
        - Users
      responses:
        "200":
          description: Tags retrieved successfully.
        "500":
          description: Internal server error occurred.
  /api/users/{id}:
    get:
      summary: Get user by ID
      description: Retrieve user details by ID.
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the user to retrieve
        - in: query
          name: proPic
          schema:
            type: string
          description: Flag to include or exclude profile pictures in the response
      responses:
        "200":
          description: User details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: User not found.
        "500":
          description: Internal server error occurred.
    put:
      summary: Update user by ID
      description: Update user details by ID.
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the user to update
        - in: query
          name: proPic
          schema:
            type: string
          description: Flag to include or exclude profile pictures in the response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User details updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request or validation error.
        "404":
          description: User not found.
        "500":
          description: Internal server error occurred.
    delete:
      tags:
        - Users
      summary: Delete a user by ID and their associated listing
      description: Deletes a user by their ID and also deletes their associated listing if it exists.
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: string
      responses:
        "200":
          description: User and associated listing (if any) deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User and associated listing (if any) deleted successfully
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
                  error:
                    type: string
                    example: Error details

  /api/users/ban:
    get:
      tags:
        - Users
      summary: Get all banned users
      description: Retrieve all users who are either permanently or temporarily banned.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  message:
                    type: string
                    example: Banned users retrieved successfully
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error retrieving banned users
                  error:
                    type: string
                    example: Internal server error details
  /api/users/forgotpassword:
    post:
      summary: Forgot password
      description: Initiates a password reset process for a user.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        "200":
          description: Password reset email sent.
        "404":
          description: Email not found.
        "500":
          description: Internal server error occurred.
  /resetpassword/{token}:
    put:
      summary: Reset password
      description: Resets the user's password using a token.
      tags:
        - Users
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: Reset token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        "200":
          description: Password updated successfully.
        "404":
          description: Invalid or expired token.
        "500":
          description: Internal server error occurred.

  /api/users/{id}/ban:
    put:
      summary: Ban a user and their associated listing
      description: Ban a user by ID for a specified duration or permanently. Also bans the associated listing.
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to ban
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                banTimeInSeconds:
                  type: integer
                  description: The duration of the ban in seconds
                  example: 3600
                banPermanently:
                  type: boolean
                  description: Whether the ban is permanent
                  example: false
                banMsg:
                  type: string
                  description: The message explaining the reason for the ban
                  example: "Violation of terms"
      responses:
        "200":
          description: User and associated listing banned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User and associated listing banned successfully"
                  userBan:
                    type: object
                    properties:
                      banTime:
                        type: string
                        format: date-time
                      banPermanently:
                        type: boolean
                      prevBanNum:
                        type: integer
        "400":
          description: Invalid ban time provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid ban time provided"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error"
                  error:
                    type: string
                    example: "Database error"

  /api/users/{id}/unban:
    put:
      summary: Unban a user and their associated listing
      description: Unban a user by ID. Also unbans the associated listing if any.
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to unban
          schema:
            type: string
      responses:
        "200":
          description: User and associated listing unbanned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User and associated listing unbanned successfully"
        "400":
          description: User is not banned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User is not banned"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error unbanning user and listing"
                  error:
                    type: string
                    example: "Database error"
  /api/matches:
    post:
      summary: Create a new match
      description: Create a new match between users.
      tags:
        - Matches
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Match"
      responses:
        "201":
          description: Match created successfully.
        "400":
          description: Invalid input.
        "500":
          description: Internal server error.

  /api/matches/user/{userID}:
    get:
      summary: Get matches by user ID
      description: Retrieve all matches for a given user.
      tags:
        - Matches
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the user.
      responses:
        "200":
          description: Matches retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Match"
        "400":
          description: Invalid user ID.
        "500":
          description: Internal server error.

  /api/matches/received/{userID}:
    get:
      summary: Get received matches by user ID
      description: Retrieve all received matches for a given user.
      tags:
        - Matches
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the user.
      responses:
        "200":
          description: Received matches retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Match"
        "400":
          description: Invalid user ID.
        "500":
          description: Internal server error.

  /api/matches/sent/{userID}:
    get:
      summary: Get sent matches by user ID
      description: Retrieve all sent matches for a given user.
      tags:
        - Matches
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the user.
      responses:
        "200":
          description: Sent matches retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Match"
        "400":
          description: Invalid user ID.
        "500":
          description: Internal server error.

  /api/matches/status/{matchID}:
    put:
      summary: Update match status
      description: Update the status of a match.
      tags:
        - Matches
      parameters:
        - in: path
          name: matchID
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the match.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                matchStatus:
                  type: string
                  enum: [In attesa, Accettato, Rifiutato]
      responses:
        "200":
          description: Match status updated successfully.
        "400":
          description: Invalid input.
        "500":
          description: Internal server error.

  /api/matches/{matchID}/messages:
    post:
      summary: Add message to match
      description: Add a message to a match.
      tags:
        - Matches
      parameters:
        - in: path
          name: matchID
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the match.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                userID:
                  type: string
                  format: uuid
      responses:
        "201":
          description: Message added successfully.
        "400":
          description: Invalid input.
        "500":
          description: Internal server error.

  /api/matches/{matchID}:
    get:
      summary: Get match by ID
      description: Retrieve a match by its unique identifier.
      tags:
        - Matches
      parameters:
        - in: path
          name: matchID
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the match.
      responses:
        "200":
          description: Match retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Match"
        "400":
          description: Invalid match ID.
        "500":
          description: Internal server error.

    put:
      summary: Update match details
      description: Update details of a match.
      tags:
        - Matches
      parameters:
        - in: path
          name: matchID
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the match.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Match"
      responses:
        "200":
          description: Match details updated successfully.
        "400":
          description: Invalid input.
        "500":
          description: Internal server error.

    delete:
      summary: Delete match by ID
      description: Delete a match by its unique identifier.
      tags:
        - Matches
      parameters:
        - in: path
          name: matchID
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the match.
      responses:
        "200":
          description: Match deleted successfully.
        "400":
          description: Invalid match ID.
        "500":
          description: Internal server error.

  /api/notifications:
    post:
      summary: Create a new notification
      description: Create a new notification for a user.
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Notification"
      responses:
        "201":
          description: Notification created successfully.
        "400":
          description: Invalid input.
        "500":
          description: Internal server error.

  /api/notifications/user/{userID}:
    get:
      summary: Get notifications by user ID
      description: Retrieve all notifications for a given user.
      tags:
        - Notifications
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the user.
      responses:
        "200":
          description: Notifications retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        "400":
          description: Invalid user ID.
        "500":
          description: Internal server error.
    delete:
      summary: Delete all notifications by user ID
      description: Delete all notifications for a given user.
      tags:
        - Notifications
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the user.
      responses:
        "200":
          description: All notifications deleted successfully.
        "400":
          description: Invalid user ID.
        "500":
          description: Internal server error.

  /api/notifications/{notificationID}/status:
    put:
      summary: Update notification status
      description: Update the status of a notification.
      tags:
        - Notifications
      parameters:
        - in: path
          name: notificationID
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the notification.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [visto, non visto]
      responses:
        "200":
          description: Notification status updated successfully.
        "400":
          description: Invalid input.
        "500":
          description: Internal server error.

  /api/notifications/user/{userID}/seen:
    put:
      summary: Mark all notifications as read
      description: Mark all notifications for a user as read.
      tags:
        - Notifications
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the user.
      responses:
        "200":
          description: All notifications marked as read.
        "400":
          description: Invalid user ID.
        "500":
          description: Internal server error.

  /api/notifications/{notificationID}:
    delete:
      summary: Delete notification by ID
      description: Delete a notification by its unique identifier.
      tags:
        - Notifications
      parameters:
        - in: path
          name: notificationID
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the notification.
      responses:
        "200":
          description: Notification deleted successfully.
        "400":
          description: Invalid notification ID.
        "500":
          description: Internal server error.
  /api/reports:
    post:
      tags:
        - Reports
      summary: Create a new report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Report"
      responses:
        "201":
          description: Report created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request"
        "404":
          description: Reporter or target not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Reporter or target not found"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error"

    get:
      tags:
        - Reports
      summary: Get all pending reports
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error"

  /api/reports/resolved:
    get:
      tags:
        - Reports
      summary: Get all resolved reports
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error"

  /api/reports/reviewing:
    get:
      tags:
        - Reports
      summary: Get all reports currently under review
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error"

  /api/reports/review:
    put:
      tags:
        - Reports
      summary: Update a report by reviewing it
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Report"
      responses:
        "200":
          description: Report reviewed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request"
        "404":
          description: Report not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Report not found"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error"

  /api/reports/resolve:
    put:
      tags:
        - Reports
      summary: Update a report by resolving it
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Report"
      responses:
        "200":
          description: Report resolved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request"
        "404":
          description: Report not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Report not found"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error"

  /api/reports/remove:
    put:
      tags:
        - Reports
      summary: Update a report by removing the reviewer and setting the status to pending
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Report"
      responses:
        "200":
          description: Report updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request"
        "404":
          description: Report not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Report not found"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error"

  /api/reports/reporter/{reporterID}:
    get:
      tags:
        - Reports
      summary: Get reports by reporter ID
      parameters:
        - name: reporterID
          in: path
          description: ID of the reporter
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error"

  /api/reports/target/{targetID}:
    get:
      tags:
        - Reports
      summary: Get reports by target ID
      parameters:
        - name: targetID
          in: path
          description: ID of the target
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error"

  /api/reports/{id}:
    get:
      tags:
        - Reports
      summary: Get a single report by ID
      parameters:
        - name: id
          in: path
          description: ID of the report to retrieve
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "404":
          description: Report not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Report not found"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error"

components:
  schemas:
    Token:
      type: object
      properties:
        userID:
          type: string
          format: uuid
          description: The ID of the user associated with the token.
        token:
          type: string
          minLength: 30
          maxLength: 30
          description: The token string for confirmation.
        expirationDate:
          type: string
          format: date-time
          description: The expiration date of the token.

    Listing:
      type: object
      properties:
        address:
          type: object
          properties:
            street:
              type: string
              minLength: 3
              maxLength: 50
            city:
              type: string
              minLength: 3
              maxLength: 50
            cap:
              type: string
              minLength: 5
              maxLength: 5
              pattern: '^\d{5}$'
            houseNum:
              type: string
              minLength: 1
              maxLength: 5
            province:
              type: string
              minLength: 2
              maxLength: 2
            country:
              type: string
              minLength: 3
              maxLength: 50
        photos:
          type: array
          items:
            type: string
          maxItems: 10
        publisherID:
          type: string
          format: uuid
        tenantsID:
          type: array
          items:
            type: string
            format: uuid
          maxItems: 12
        typology:
          type: string
          maxLength: 30
        description:
          type: string
          maxLength: 1000
        price:
          type: number
          minimum: 10
          maximum: 10000
        floorArea:
          type: number
          minimum: 1
          maximum: 10000
        availability:
          type: string
        publicationDate:
          type: string
          format: date-time
        ban:
          type: object
          properties:
            banTime:
              type: string
              format: date-time
              description: The time until the ban lasts.
            banPermanently:
              type: boolean
              default: false
              description: Indicates if the listing is banned permanently.
            prevBanNum:
              type: integer
              default: 0
              description: The number of previous bans.
            banMsg:
              type: string
              maxLength: 500
              description: The message explaining the reason for the ban.

    User:
      type: object
      properties:
        username:
          type: string
          minLength: 2
          maxLength: 20
          description: The username of the user.
        name:
          type: string
          minLength: 2
          maxLength: 30
          description: The name of the user.
        surname:
          type: string
          minLength: 2
          maxLength: 30
          description: The surname of the user.
        email:
          type: string
          minLength: 5
          maxLength: 50
          pattern: '^\S+@\S+\.\S+$'
          description: The email of the user.
        password:
          type: string
          description: The hashed password of the user.
        birthDate:
          type: string
          format: date-time
          description: The birth date of the user.
        creationDate:
          type: string
          format: date-time
          description: The creation date of the user account.
        lastUpdate:
          type: string
          format: date-time
          description: The last update date of the user account.
        habits:
          type: array
          items:
            type: string
          description: The habits of the user.
        hobbies:
          type: array
          items:
            type: string
          description: The hobbies of the user.
        proPic:
          type: array
          items:
            type: string
          description: The profile picture URLs of the user.
        activityStatus:
          type: string
          enum:
            - attivo
            - attivo recentemente
            - inattivo
          description: The activity status of the user.
        active:
          type: boolean
          description: The activation status of the user account.
        listingID:
          type: string
          format: uuid
          description: The ID of the listing associated with the user.
        matchListID:
          type: array
          items:
            type: string
            format: uuid
          description: The IDs of the matches associated with the user.
        ban:
          type: object
          properties:
            banTime:
              type: string
              format: date-time
              description: The time until the ban lasts.
            banPermanently:
              type: boolean
              default: false
              description: Indicates if the user is banned permanently.
            prevBanNum:
              type: integer
              default: 0
              description: The number of previous bans.
            banMsg:
              type: string
              maxLength: 500
              description: The message explaining the reason for the ban.

    Match:
      type: object
      properties:
        requesterID:
          type: string
          format: uuid
          description: The ID of the user who requested the match.
        receiverID:
          type: string
          format: uuid
          description: The ID of the user who received the match request.
        requestDate:
          type: string
          format: date-time
          description: The date when the match request was made.
        confirmationDate:
          type: string
          format: date-time
          description: The date when the match was confirmed.
        matchStatus:
          type: string
          $ref: "#/components/schemas/MatchStatusEnum"
        matchType:
          type: string
          $ref: "#/components/schemas/MatchTypeEnum"
        messages:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
              date:
                type: string
                format: date-time
              userID:
                type: string
                format: uuid

    Notification:
      type: object
      properties:
        userID:
          type: string
          format: uuid
          description: The ID of the user receiving the notification.
        type:
          type: string
          $ref: "#/components/schemas/NotificationTypeEnum"
        message:
          type: string
          description: The content of the notification.
        status:
          type: string
          $ref: "#/components/schemas/NotificationStatusEnum"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        link:
          type: string
          description: URL or route related to the notification.
        priority:
          type: string
          $ref: "#/components/schemas/NotificationPriorityEnum"

    Report:
      type: object
      properties:
        reporterID:
          type: string
          format: uuid
          description: The ID of the user who reported the issue.
        reportType:
          type: string
          $ref: "#/components/schemas/ReportTypeEnum"
        reportStatus:
          type: string
          $ref: "#/components/schemas/ReportStatusEnum"
        reportDate:
          type: string
          format: date-time
          description: The date when the report was created.
        reviewedDate:
          type: string
          format: date-time
          description: The date when the report was reviewed.
        reviewerID:
          type: string
          format: uuid
          description: The ID of the reviewer.
        resolvedDate:
          type: string
          format: date-time
          description: The date when the report was resolved.
        targetID:
          type: string
          format: uuid
          description: The ID of the target of the report.
        targetModel:
          type: string
          enum:
            - User
            - Listing
            - Match
            - Message
          description: The model type of the target.
        description:
          type: string
          maxLength: 1000
          description: The description of the report.

    # Enums
    MatchStatusEnum:
      type: string
      enum:
        - In attesa
        - Accettato
        - Rifiutato

    MatchTypeEnum:
      type: string
      enum:
        - Appartamento
        - Coinquilino

    NotificationTypeEnum:
      type: string
      enum:
        - match
        - messaggio
        - alert
        - promemoria

    NotificationStatusEnum:
      type: string
      enum:
        - visto
        - non visto

    NotificationPriorityEnum:
      type: string
      enum:
        - basso
        - medio
        - alto

    ReportTypeEnum:
      type: string
      enum:
        - utente
        - inserzione
        - match
        - messaggio

    ReportStatusEnum:
      type: string
      enum:
        - in attesa
        - revisionato
        - risolto
